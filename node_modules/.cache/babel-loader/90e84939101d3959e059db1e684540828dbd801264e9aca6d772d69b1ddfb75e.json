{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damun\\\\sql-quiz-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js - Main Application Component\n// This is the root component that contains our entire SQL Quiz application\n// Think of this as the \"container\" that holds all other parts of our app\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport QuizInterface from './components/QuizInterface';\nimport DatabaseViewer from './components/DatabaseViewer';\nimport Navigation from './components/Navigation';\nimport './styles/App.css';\n\n// Styled component for the main app container\n// This creates a responsive layout that works on all screen sizes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n`;\n\n// Main content area with proper spacing and layout\n_c = AppContainer;\nconst MainContent = styled.main`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  \n  @media (max-width: 768px) {\n    padding: 10px;\n  }\n`;\n\n// App component - this is where our application logic lives\n_c2 = MainContent;\nfunction App() {\n  _s();\n  // State management using React hooks\n  // 'currentView' tracks which part of the app the user is viewing\n  // 'quizData' stores the current quiz questions and user progress\n  const [currentView, setCurrentView] = useState('quiz'); // 'quiz', 'database', 'results'\n  const [quizData, setQuizData] = useState({\n    currentQuestion: 0,\n    score: 0,\n    totalQuestions: 0,\n    userAnswers: [],\n    isComplete: false\n  });\n\n  // Function to handle navigation between different views\n  const handleViewChange = view => {\n    setCurrentView(view);\n  };\n\n  // Function to update quiz progress when user answers questions\n  const updateQuizProgress = newData => {\n    setQuizData(prevData => ({\n      ...prevData,\n      ...newData\n    }));\n  };\n\n  // Function to reset the quiz for a fresh start\n  const resetQuiz = () => {\n    setQuizData({\n      currentQuestion: 0,\n      score: 0,\n      totalQuestions: 0,\n      userAnswers: [],\n      isComplete: false\n    });\n    setCurrentView('quiz');\n  };\n\n  // Render the appropriate component based on current view\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'quiz':\n        return /*#__PURE__*/_jsxDEV(QuizInterface, {\n          quizData: quizData,\n          updateQuizProgress: updateQuizProgress,\n          onComplete: () => setCurrentView('results')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this);\n      case 'database':\n        return /*#__PURE__*/_jsxDEV(DatabaseViewer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 16\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Quiz Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Score: \", quizData.score, \" / \", quizData.totalQuestions]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetQuiz,\n            children: \"Take Quiz Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(QuizInterface, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        currentView: currentView,\n        onViewChange: handleViewChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), renderCurrentView()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"63BC+c08d4wvqvVHCHFHTCn3TPE=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"MainContent\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","styled","QuizInterface","DatabaseViewer","Navigation","jsxDEV","_jsxDEV","AppContainer","div","_c","MainContent","main","_c2","App","_s","currentView","setCurrentView","quizData","setQuizData","currentQuestion","score","totalQuestions","userAnswers","isComplete","handleViewChange","view","updateQuizProgress","newData","prevData","resetQuiz","renderCurrentView","onComplete","fileName","_jsxFileName","lineNumber","columnNumber","children","onClick","onViewChange","_c3","$RefreshReg$"],"sources":["C:/Users/damun/sql-quiz-app/src/App.js"],"sourcesContent":["// App.js - Main Application Component\r\n// This is the root component that contains our entire SQL Quiz application\r\n// Think of this as the \"container\" that holds all other parts of our app\r\n\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport QuizInterface from './components/QuizInterface';\r\nimport DatabaseViewer from './components/DatabaseViewer';\r\nimport Navigation from './components/Navigation';\r\nimport './styles/App.css';\r\n\r\n// Styled component for the main app container\r\n// This creates a responsive layout that works on all screen sizes\r\nconst AppContainer = styled.div`\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\r\n`;\r\n\r\n// Main content area with proper spacing and layout\r\nconst MainContent = styled.main`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\n// App component - this is where our application logic lives\r\nfunction App() {\r\n  // State management using React hooks\r\n  // 'currentView' tracks which part of the app the user is viewing\r\n  // 'quizData' stores the current quiz questions and user progress\r\n  const [currentView, setCurrentView] = useState('quiz'); // 'quiz', 'database', 'results'\r\n  const [quizData, setQuizData] = useState({\r\n    currentQuestion: 0,\r\n    score: 0,\r\n    totalQuestions: 0,\r\n    userAnswers: [],\r\n    isComplete: false\r\n  });\r\n\r\n  // Function to handle navigation between different views\r\n  const handleViewChange = (view) => {\r\n    setCurrentView(view);\r\n  };\r\n\r\n  // Function to update quiz progress when user answers questions\r\n  const updateQuizProgress = (newData) => {\r\n    setQuizData(prevData => ({\r\n      ...prevData,\r\n      ...newData\r\n    }));\r\n  };\r\n\r\n  // Function to reset the quiz for a fresh start\r\n  const resetQuiz = () => {\r\n    setQuizData({\r\n      currentQuestion: 0,\r\n      score: 0,\r\n      totalQuestions: 0,\r\n      userAnswers: [],\r\n      isComplete: false\r\n    });\r\n    setCurrentView('quiz');\r\n  };\r\n\r\n  // Render the appropriate component based on current view\r\n  const renderCurrentView = () => {\r\n    switch (currentView) {\r\n      case 'quiz':\r\n        return (\r\n          <QuizInterface \r\n            quizData={quizData}\r\n            updateQuizProgress={updateQuizProgress}\r\n            onComplete={() => setCurrentView('results')}\r\n          />\r\n        );\r\n      case 'database':\r\n        return <DatabaseViewer />;\r\n      case 'results':\r\n        return (\r\n          <div>\r\n            {/* Results component will be created later */}\r\n            <h2>Quiz Results</h2>\r\n            <p>Score: {quizData.score} / {quizData.totalQuestions}</p>\r\n            <button onClick={resetQuiz}>Take Quiz Again</button>\r\n          </div>\r\n        );\r\n      default:\r\n        return <QuizInterface />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <MainContent>\r\n        {/* Navigation component for switching between quiz and database views */}\r\n        <Navigation \r\n          currentView={currentView}\r\n          onViewChange={handleViewChange}\r\n        />\r\n        \r\n        {/* Render the current view (quiz, database, or results) */}\r\n        {renderCurrentView()}\r\n      </MainContent>\r\n    </AppContainer>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,kBAAkB;;AAEzB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGN,MAAM,CAACO,GAAG;AAC/B;AACA;AACA;AACA,CAAC;;AAED;AAAAC,EAAA,GANMF,YAAY;AAOlB,MAAMG,WAAW,GAAGT,MAAM,CAACU,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GAVMF,WAAW;AAWjB,SAASG,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EACxD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC;IACvCmB,eAAe,EAAE,CAAC;IAClBC,KAAK,EAAE,CAAC;IACRC,cAAc,EAAE,CAAC;IACjBC,WAAW,EAAE,EAAE;IACfC,UAAU,EAAE;EACd,CAAC,CAAC;;EAEF;EACA,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;IACjCT,cAAc,CAACS,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAIC,OAAO,IAAK;IACtCT,WAAW,CAACU,QAAQ,KAAK;MACvB,GAAGA,QAAQ;MACX,GAAGD;IACL,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,SAAS,GAAGA,CAAA,KAAM;IACtBX,WAAW,CAAC;MACVC,eAAe,EAAE,CAAC;MAClBC,KAAK,EAAE,CAAC;MACRC,cAAc,EAAE,CAAC;MACjBC,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE;IACd,CAAC,CAAC;IACFP,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC;;EAED;EACA,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,QAAQf,WAAW;MACjB,KAAK,MAAM;QACT,oBACET,OAAA,CAACJ,aAAa;UACZe,QAAQ,EAAEA,QAAS;UACnBS,kBAAkB,EAAEA,kBAAmB;UACvCK,UAAU,EAAEA,CAAA,KAAMf,cAAc,CAAC,SAAS;QAAE;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC;MAEN,KAAK,UAAU;QACb,oBAAO7B,OAAA,CAACH,cAAc;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAC3B,KAAK,SAAS;QACZ,oBACE7B,OAAA;UAAA8B,QAAA,gBAEE9B,OAAA;YAAA8B,QAAA,EAAI;UAAY;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrB7B,OAAA;YAAA8B,QAAA,GAAG,SAAO,EAACnB,QAAQ,CAACG,KAAK,EAAC,KAAG,EAACH,QAAQ,CAACI,cAAc;UAAA;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1D7B,OAAA;YAAQ+B,OAAO,EAAER,SAAU;YAAAO,QAAA,EAAC;UAAe;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC;MAEV;QACE,oBAAO7B,OAAA,CAACJ,aAAa;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;IAC5B;EACF,CAAC;EAED,oBACE7B,OAAA,CAACC,YAAY;IAAA6B,QAAA,eACX9B,OAAA,CAACI,WAAW;MAAA0B,QAAA,gBAEV9B,OAAA,CAACF,UAAU;QACTW,WAAW,EAAEA,WAAY;QACzBuB,YAAY,EAAEd;MAAiB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,EAGDL,iBAAiB,CAAC,CAAC;IAAA;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEnB;AAACrB,EAAA,CA/EQD,GAAG;AAAA0B,GAAA,GAAH1B,GAAG;AAiFZ,eAAeA,GAAG;AAAC,IAAAJ,EAAA,EAAAG,GAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA/B,EAAA;AAAA+B,YAAA,CAAA5B,GAAA;AAAA4B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}