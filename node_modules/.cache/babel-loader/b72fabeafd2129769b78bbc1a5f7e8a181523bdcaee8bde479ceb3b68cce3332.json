{"ast":null,"code":"// quizQuestions.js - SQL Quiz Questions Database\n// This file contains all the quiz questions, answers, and explanations\n// Questions are organized by difficulty and cover various SQL concepts\n\nexport const quizQuestions = [\n// BEGINNER LEVEL QUESTIONS\n{\n  id: 1,\n  difficulty: 'beginner',\n  category: 'SELECT',\n  question: 'Which SQL command is used to retrieve data from a database?',\n  options: ['SELECT', 'EXTRACT', 'GET', 'RETRIEVE'],\n  correctAnswer: 0,\n  explanation: 'SELECT is the primary SQL command used to retrieve data from database tables. It allows you to specify which columns and rows you want to see.',\n  sqlExample: 'SELECT * FROM customers;'\n}, {\n  id: 2,\n  difficulty: 'beginner',\n  category: 'WHERE',\n  question: 'What clause is used to filter records in SQL?',\n  options: ['FILTER', 'WHERE', 'HAVING', 'CONDITION'],\n  correctAnswer: 1,\n  explanation: 'The WHERE clause is used to filter records based on specified conditions. It comes after the FROM clause in a SELECT statement.',\n  sqlExample: 'SELECT * FROM products WHERE price > 50;'\n}, {\n  id: 3,\n  difficulty: 'beginner',\n  category: 'ORDER BY',\n  question: 'How do you sort results in ascending order in SQL?',\n  options: ['SORT ASC', 'ORDER BY ASC', 'ORDER BY', 'SORT BY'],\n  correctAnswer: 2,\n  explanation: 'ORDER BY is used to sort results. By default, it sorts in ascending order. You can also use ORDER BY column_name DESC for descending order.',\n  sqlExample: 'SELECT * FROM employees ORDER BY last_name;'\n},\n// INTERMEDIATE LEVEL QUESTIONS\n{\n  id: 4,\n  difficulty: 'intermediate',\n  category: 'JOINS',\n  question: 'Which type of JOIN returns all records from both tables, even if there is no match?',\n  options: ['INNER JOIN', 'LEFT JOIN', 'FULL OUTER JOIN', 'CROSS JOIN'],\n  correctAnswer: 2,\n  explanation: 'FULL OUTER JOIN returns all records from both tables. If there is no match, the result will contain NULL values for the missing side.',\n  sqlExample: 'SELECT * FROM orders FULL OUTER JOIN customers ON orders.customer_id = customers.id;'\n}, {\n  id: 5,\n  difficulty: 'intermediate',\n  category: 'AGGREGATE',\n  question: 'What function would you use to find the average price of all products?',\n  options: ['MEAN()', 'AVERAGE()', 'AVG()', 'MEDIAN()'],\n  correctAnswer: 2,\n  explanation: 'AVG() is the SQL aggregate function used to calculate the average of a numeric column. It ignores NULL values in its calculation.',\n  sqlExample: 'SELECT AVG(price) FROM products;'\n}, {\n  id: 6,\n  difficulty: 'intermediate',\n  category: 'GROUP BY',\n  question: 'When using GROUP BY, what clause is used to filter grouped results?',\n  options: ['WHERE', 'HAVING', 'FILTER', 'GROUP WHERE'],\n  correctAnswer: 1,\n  explanation: 'HAVING is used to filter results after grouping. WHERE filters individual rows before grouping, while HAVING filters groups after aggregation.',\n  sqlExample: 'SELECT category, AVG(price) FROM products GROUP BY category HAVING AVG(price) > 100;'\n},\n// ADVANCED LEVEL QUESTIONS\n{\n  id: 7,\n  difficulty: 'advanced',\n  category: 'SUBQUERIES',\n  question: 'What is a subquery that returns multiple rows and columns called?',\n  options: ['Scalar subquery', 'Column subquery', 'Table subquery', 'Row subquery'],\n  correctAnswer: 2,\n  explanation: 'A table subquery returns multiple rows and columns, essentially creating a temporary table that can be used in FROM clauses or JOINs.',\n  sqlExample: 'SELECT * FROM (SELECT category, AVG(price) as avg_price FROM products GROUP BY category) as temp;'\n}, {\n  id: 8,\n  difficulty: 'advanced',\n  category: 'WINDOW FUNCTIONS',\n  question: 'Which window function would you use to assign a unique rank to each row within a partition?',\n  options: ['ROW_NUMBER()', 'RANK()', 'DENSE_RANK()', 'NTILE()'],\n  correctAnswer: 0,\n  explanation: 'ROW_NUMBER() assigns a unique sequential integer to each row within a partition, starting from 1. Unlike RANK(), it never produces ties.',\n  sqlExample: 'SELECT name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rank FROM employees;'\n}, {\n  id: 9,\n  difficulty: 'advanced',\n  category: 'CTE',\n  question: 'What does CTE stand for in SQL?',\n  options: ['Common Table Expression', 'Complex Table Element', 'Conditional Table Extension', 'Custom Table Entity'],\n  correctAnswer: 0,\n  explanation: 'CTE stands for Common Table Expression. It allows you to define a temporary named result set that exists within the scope of a single statement.',\n  sqlExample: 'WITH sales_summary AS (SELECT category, SUM(amount) FROM sales GROUP BY category) SELECT * FROM sales_summary;'\n},\n// EXPERT LEVEL QUESTIONS\n{\n  id: 10,\n  difficulty: 'expert',\n  category: 'PERFORMANCE',\n  question: 'Which of the following is NOT a good practice for SQL performance optimization?',\n  options: ['Using indexes on frequently queried columns', 'Avoiding SELECT * in production queries', 'Using subqueries instead of JOINs when possible', 'Limiting result sets with WHERE clauses'],\n  correctAnswer: 2,\n  explanation: 'Using subqueries instead of JOINs is generally NOT a good practice. JOINs are typically more efficient and readable than equivalent subqueries.',\n  sqlExample: '-- Better: SELECT * FROM orders o JOIN customers c ON o.customer_id = c.id;'\n}, {\n  id: 11,\n  difficulty: 'expert',\n  category: 'TRANSACTIONS',\n  question: 'What does ACID stand for in database transactions?',\n  options: ['Atomicity, Consistency, Isolation, Durability', 'Accuracy, Consistency, Integrity, Data', 'Atomicity, Concurrency, Integrity, Durability', 'Accuracy, Consistency, Isolation, Data'],\n  correctAnswer: 0,\n  explanation: 'ACID stands for Atomicity (all or nothing), Consistency (data remains valid), Isolation (transactions don\\'t interfere), and Durability (permanent changes).',\n  sqlExample: 'BEGIN TRANSACTION; UPDATE accounts SET balance = balance - 100 WHERE id = 1; COMMIT;'\n}, {\n  id: 12,\n  difficulty: 'expert',\n  category: 'ADVANCED FUNCTIONS',\n  question: 'Which function would you use to pivot rows into columns in SQL?',\n  options: ['PIVOT', 'CROSS APPLY', 'UNPIVOT', 'All of the above'],\n  correctAnswer: 3,\n  explanation: 'All three functions can be used for pivoting data. PIVOT transforms rows to columns, CROSS APPLY can be used for complex pivoting, and UNPIVOT does the reverse.',\n  sqlExample: 'SELECT * FROM sales PIVOT (SUM(amount) FOR month IN ([Jan], [Feb], [Mar])) as pvt;'\n}];\n\n// Helper function to get questions by difficulty\nexport const getQuestionsByDifficulty = difficulty => {\n  return quizQuestions.filter(q => q.difficulty === difficulty);\n};\n\n// Helper function to get questions by category\nexport const getQuestionsByCategory = category => {\n  return quizQuestions.filter(q => q.category === category);\n};\n\n// Helper function to get random questions\nexport const getRandomQuestions = (count = 10) => {\n  const shuffled = [...quizQuestions].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Quiz configuration\nexport const quizConfig = {\n  timeLimit: 300,\n  // 5 minutes per quiz\n  questionsPerQuiz: 10,\n  passingScore: 70,\n  // 70% to pass\n  difficultyWeights: {\n    beginner: 1,\n    intermediate: 2,\n    advanced: 3,\n    expert: 4\n  }\n};","map":{"version":3,"names":["quizQuestions","id","difficulty","category","question","options","correctAnswer","explanation","sqlExample","getQuestionsByDifficulty","filter","q","getQuestionsByCategory","getRandomQuestions","count","shuffled","sort","Math","random","slice","quizConfig","timeLimit","questionsPerQuiz","passingScore","difficultyWeights","beginner","intermediate","advanced","expert"],"sources":["C:/Users/damun/sql-quiz-app/src/data/quizQuestions.js"],"sourcesContent":["// quizQuestions.js - SQL Quiz Questions Database\r\n// This file contains all the quiz questions, answers, and explanations\r\n// Questions are organized by difficulty and cover various SQL concepts\r\n\r\nexport const quizQuestions = [\r\n  // BEGINNER LEVEL QUESTIONS\r\n  {\r\n    id: 1,\r\n    difficulty: 'beginner',\r\n    category: 'SELECT',\r\n    question: 'Which SQL command is used to retrieve data from a database?',\r\n    options: [\r\n      'SELECT',\r\n      'EXTRACT', \r\n      'GET',\r\n      'RETRIEVE'\r\n    ],\r\n    correctAnswer: 0,\r\n    explanation: 'SELECT is the primary SQL command used to retrieve data from database tables. It allows you to specify which columns and rows you want to see.',\r\n    sqlExample: 'SELECT * FROM customers;'\r\n  },\r\n  \r\n  {\r\n    id: 2,\r\n    difficulty: 'beginner',\r\n    category: 'WHERE',\r\n    question: 'What clause is used to filter records in SQL?',\r\n    options: [\r\n      'FILTER',\r\n      'WHERE',\r\n      'HAVING',\r\n      'CONDITION'\r\n    ],\r\n    correctAnswer: 1,\r\n    explanation: 'The WHERE clause is used to filter records based on specified conditions. It comes after the FROM clause in a SELECT statement.',\r\n    sqlExample: 'SELECT * FROM products WHERE price > 50;'\r\n  },\r\n  \r\n  {\r\n    id: 3,\r\n    difficulty: 'beginner',\r\n    category: 'ORDER BY',\r\n    question: 'How do you sort results in ascending order in SQL?',\r\n    options: [\r\n      'SORT ASC',\r\n      'ORDER BY ASC',\r\n      'ORDER BY',\r\n      'SORT BY'\r\n    ],\r\n    correctAnswer: 2,\r\n    explanation: 'ORDER BY is used to sort results. By default, it sorts in ascending order. You can also use ORDER BY column_name DESC for descending order.',\r\n    sqlExample: 'SELECT * FROM employees ORDER BY last_name;'\r\n  },\r\n\r\n  // INTERMEDIATE LEVEL QUESTIONS\r\n  {\r\n    id: 4,\r\n    difficulty: 'intermediate',\r\n    category: 'JOINS',\r\n    question: 'Which type of JOIN returns all records from both tables, even if there is no match?',\r\n    options: [\r\n      'INNER JOIN',\r\n      'LEFT JOIN',\r\n      'FULL OUTER JOIN',\r\n      'CROSS JOIN'\r\n    ],\r\n    correctAnswer: 2,\r\n    explanation: 'FULL OUTER JOIN returns all records from both tables. If there is no match, the result will contain NULL values for the missing side.',\r\n    sqlExample: 'SELECT * FROM orders FULL OUTER JOIN customers ON orders.customer_id = customers.id;'\r\n  },\r\n  \r\n  {\r\n    id: 5,\r\n    difficulty: 'intermediate',\r\n    category: 'AGGREGATE',\r\n    question: 'What function would you use to find the average price of all products?',\r\n    options: [\r\n      'MEAN()',\r\n      'AVERAGE()',\r\n      'AVG()',\r\n      'MEDIAN()'\r\n    ],\r\n    correctAnswer: 2,\r\n    explanation: 'AVG() is the SQL aggregate function used to calculate the average of a numeric column. It ignores NULL values in its calculation.',\r\n    sqlExample: 'SELECT AVG(price) FROM products;'\r\n  },\r\n  \r\n  {\r\n    id: 6,\r\n    difficulty: 'intermediate',\r\n    category: 'GROUP BY',\r\n    question: 'When using GROUP BY, what clause is used to filter grouped results?',\r\n    options: [\r\n      'WHERE',\r\n      'HAVING',\r\n      'FILTER',\r\n      'GROUP WHERE'\r\n    ],\r\n    correctAnswer: 1,\r\n    explanation: 'HAVING is used to filter results after grouping. WHERE filters individual rows before grouping, while HAVING filters groups after aggregation.',\r\n    sqlExample: 'SELECT category, AVG(price) FROM products GROUP BY category HAVING AVG(price) > 100;'\r\n  },\r\n\r\n  // ADVANCED LEVEL QUESTIONS\r\n  {\r\n    id: 7,\r\n    difficulty: 'advanced',\r\n    category: 'SUBQUERIES',\r\n    question: 'What is a subquery that returns multiple rows and columns called?',\r\n    options: [\r\n      'Scalar subquery',\r\n      'Column subquery',\r\n      'Table subquery',\r\n      'Row subquery'\r\n    ],\r\n    correctAnswer: 2,\r\n    explanation: 'A table subquery returns multiple rows and columns, essentially creating a temporary table that can be used in FROM clauses or JOINs.',\r\n    sqlExample: 'SELECT * FROM (SELECT category, AVG(price) as avg_price FROM products GROUP BY category) as temp;'\r\n  },\r\n  \r\n  {\r\n    id: 8,\r\n    difficulty: 'advanced',\r\n    category: 'WINDOW FUNCTIONS',\r\n    question: 'Which window function would you use to assign a unique rank to each row within a partition?',\r\n    options: [\r\n      'ROW_NUMBER()',\r\n      'RANK()',\r\n      'DENSE_RANK()',\r\n      'NTILE()'\r\n    ],\r\n    correctAnswer: 0,\r\n    explanation: 'ROW_NUMBER() assigns a unique sequential integer to each row within a partition, starting from 1. Unlike RANK(), it never produces ties.',\r\n    sqlExample: 'SELECT name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rank FROM employees;'\r\n  },\r\n  \r\n  {\r\n    id: 9,\r\n    difficulty: 'advanced',\r\n    category: 'CTE',\r\n    question: 'What does CTE stand for in SQL?',\r\n    options: [\r\n      'Common Table Expression',\r\n      'Complex Table Element',\r\n      'Conditional Table Extension',\r\n      'Custom Table Entity'\r\n    ],\r\n    correctAnswer: 0,\r\n    explanation: 'CTE stands for Common Table Expression. It allows you to define a temporary named result set that exists within the scope of a single statement.',\r\n    sqlExample: 'WITH sales_summary AS (SELECT category, SUM(amount) FROM sales GROUP BY category) SELECT * FROM sales_summary;'\r\n  },\r\n\r\n  // EXPERT LEVEL QUESTIONS\r\n  {\r\n    id: 10,\r\n    difficulty: 'expert',\r\n    category: 'PERFORMANCE',\r\n    question: 'Which of the following is NOT a good practice for SQL performance optimization?',\r\n    options: [\r\n      'Using indexes on frequently queried columns',\r\n      'Avoiding SELECT * in production queries',\r\n      'Using subqueries instead of JOINs when possible',\r\n      'Limiting result sets with WHERE clauses'\r\n    ],\r\n    correctAnswer: 2,\r\n    explanation: 'Using subqueries instead of JOINs is generally NOT a good practice. JOINs are typically more efficient and readable than equivalent subqueries.',\r\n    sqlExample: '-- Better: SELECT * FROM orders o JOIN customers c ON o.customer_id = c.id;'\r\n  },\r\n  \r\n  {\r\n    id: 11,\r\n    difficulty: 'expert',\r\n    category: 'TRANSACTIONS',\r\n    question: 'What does ACID stand for in database transactions?',\r\n    options: [\r\n      'Atomicity, Consistency, Isolation, Durability',\r\n      'Accuracy, Consistency, Integrity, Data',\r\n      'Atomicity, Concurrency, Integrity, Durability',\r\n      'Accuracy, Consistency, Isolation, Data'\r\n    ],\r\n    correctAnswer: 0,\r\n    explanation: 'ACID stands for Atomicity (all or nothing), Consistency (data remains valid), Isolation (transactions don\\'t interfere), and Durability (permanent changes).',\r\n    sqlExample: 'BEGIN TRANSACTION; UPDATE accounts SET balance = balance - 100 WHERE id = 1; COMMIT;'\r\n  },\r\n  \r\n  {\r\n    id: 12,\r\n    difficulty: 'expert',\r\n    category: 'ADVANCED FUNCTIONS',\r\n    question: 'Which function would you use to pivot rows into columns in SQL?',\r\n    options: [\r\n      'PIVOT',\r\n      'CROSS APPLY',\r\n      'UNPIVOT',\r\n      'All of the above'\r\n    ],\r\n    correctAnswer: 3,\r\n    explanation: 'All three functions can be used for pivoting data. PIVOT transforms rows to columns, CROSS APPLY can be used for complex pivoting, and UNPIVOT does the reverse.',\r\n    sqlExample: 'SELECT * FROM sales PIVOT (SUM(amount) FOR month IN ([Jan], [Feb], [Mar])) as pvt;'\r\n  }\r\n];\r\n\r\n// Helper function to get questions by difficulty\r\nexport const getQuestionsByDifficulty = (difficulty) => {\r\n  return quizQuestions.filter(q => q.difficulty === difficulty);\r\n};\r\n\r\n// Helper function to get questions by category\r\nexport const getQuestionsByCategory = (category) => {\r\n  return quizQuestions.filter(q => q.category === category);\r\n};\r\n\r\n// Helper function to get random questions\r\nexport const getRandomQuestions = (count = 10) => {\r\n  const shuffled = [...quizQuestions].sort(() => 0.5 - Math.random());\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\n// Quiz configuration\r\nexport const quizConfig = {\r\n  timeLimit: 300, // 5 minutes per quiz\r\n  questionsPerQuiz: 10,\r\n  passingScore: 70, // 70% to pass\r\n  difficultyWeights: {\r\n    beginner: 1,\r\n    intermediate: 2,\r\n    advanced: 3,\r\n    expert: 4\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}